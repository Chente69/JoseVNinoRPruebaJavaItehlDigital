package com.bezkoder.spring.data.mongodb.controller;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.bezkoder.spring.data.mongodb.model.Curso;
import com.bezkoder.spring.data.mongodb.model.Modalidad;
import com.bezkoder.spring.data.mongodb.model.Tutorial;
import com.bezkoder.spring.data.mongodb.repository.CursoRepository;
import com.bezkoder.spring.data.mongodb.repository.ModalidadRepository;

@CrossOrigin(origins = "http://localhost:8081")
@RestController
@RequestMapping("/api")

public class CursoController {
	  @Autowired
	  CursoRepository cursoRepository;
	  
	  @Autowired
	  ModalidadRepository modalidadRepository;
	  
	  @GetMapping("/cursos")
	  public ResponseEntity<List<Curso>> getAllCursos(@RequestParam(required = false) String title) {
	    try {
	      List<Curso> cursos = new ArrayList<Curso>();

	      if (title == null)
	    	  cursoRepository.findAll().forEach(cursos::add);
	      //else
	    	//  cursoRepository.findByTitleContaining(title).forEach(cursos::add);

	      if (cursos.isEmpty()) {
	        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	      }

	      return new ResponseEntity<>(cursos, HttpStatus.OK);
	    } catch (Exception e) {
	      return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	  }
	  
	  @GetMapping("/tutorials/{id}")
	  public ResponseEntity<Curso> getTutorialById(@PathVariable("id") String id) {
	    Optional<Curso> cursoData = cursoRepository.findById(id);

	    if (cursoData.isPresent()) {
	      return new ResponseEntity<>(cursoData.get(), HttpStatus.OK);
	    } else {
	      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	    }
	  }
	  
	  @PostMapping("/cursos")
	  public ResponseEntity<Curso> createCurso(@RequestBody Curso curso) {
		  
	    try { 
	      Modalidad _modaIns;
	      Modalidad moda= curso.getModalidad();
	      String nombreMod= moda.getNombre();
	      List<Modalidad> _modalidades = modalidadRepository.findByNombre(nombreMod);
	      if (_modalidades.isEmpty()) {
	    	  _modaIns= modalidadRepository.save(new Modalidad(moda.getNombre(),moda.getDescripcion()));
	      }else
	    	  _modaIns =_modalidades.get(0);
	    	  
	      Curso _curso = cursoRepository.save(new  Curso(curso.getNombre(), curso.getDescripcion(),curso.getCosto(),curso.getHoras(), curso.getDirigidoA(),_modaIns));
	      return new ResponseEntity<>(_curso, HttpStatus.CREATED);
	    } catch (Exception e) {
	      return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	  }	  
}
