package com.bezkoder.spring.data.mongodb.controller;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.bezkoder.spring.data.mongodb.model.Curso;
import com.bezkoder.spring.data.mongodb.model.Modalidad;
import com.bezkoder.spring.data.mongodb.model.Tutorial;
import com.bezkoder.spring.data.mongodb.repository.CursoRepository;

@CrossOrigin(origins = "http://localhost:8081")
@RestController
@RequestMapping("/api")

public class CursoController {
	  @Autowired
	  CursoRepository cursoRepository;
	  
	  @GetMapping("/cursos")
	  public ResponseEntity<List<Curso>> getAllCursos(@RequestParam(required = false) String title) {
	    try {
	      List<Curso> cursos = new ArrayList<Curso>();

	      if (title == null)
	    	  cursoRepository.findAll().forEach(cursos::add);
	      //else
	    	//  cursoRepository.findByTitleContaining(title).forEach(cursos::add);

	      if (cursos.isEmpty()) {
	        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	      }

	      return new ResponseEntity<>(cursos, HttpStatus.OK);
	    } catch (Exception e) {
	      return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	  }
	  
	  @PostMapping("/tutorials")
	  public ResponseEntity<Curso> createCurso(@RequestBody Curso curso) {
	    try {
	      Modalidad moda= curso.getModalidad();
	      Curso _curso = cursoRepository.save(new  Curso(curso.getNombre(), curso.getDescripcion(),curso.getCosto(),curso.getHoras(), curso.getDirigidoA(),new Modalidad(moda.getNombre(),moda.getDescripcion())));
	      return new ResponseEntity<>(_curso, HttpStatus.CREATED);
	    } catch (Exception e) {
	      return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	  }	  
}
